name: Prerelease pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - 'v*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.14.4'
  GPG_MAIL: 'infrastructure-eng@newrelic.com'
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic'
  PFX_PASSPHRASE:  ${{ secrets.OHAI_PFX_PASSPHRASE }}
  SNYK_TOKEN: ${{ secrets.COREINT_SNYK_TOKEN }}
  TAG: ${{ github.event.release.tag_name }}
  DOCKER_HUB_ID: ${{ secrets.OHAI_DOCKER_HUB_ID }}
  DOCKER_HUB_PASSWORD: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}

jobs:
  unit-test-linux:
    name: Linux unit tests
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Validate code
        run: make ci/validate

      - name: Running unit tests
        run: make ci/test-coverage

      - name: Install gcov2lcov
        working-directory: /tmp
        run: go get -u github.com/jandelgado/gcov2lcov

      - name: Convert coverage.out to lcov.info
        run: gcov2lcov -infile=coverage.out -outfile=lcov.info

      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: lcov.info
          flag-name: run-linux
          parallel: true

  harvest-test-linux:
    name: Linux harvest tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-18.04, ubuntu-16.04 ]
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        run: sudo apt install musl-dev

      - name: Running Harvest tests
        run: make linux/harvest-tests

  proxy-tests-linux:
    name: Proxy tests
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: Running proxy tests
        run: make proxy-test
  
  packaging-linux:
    name: Build and upload all artifacts into GH Release assets
    runs-on: ubuntu-20.04
    needs: [unit-test-linux, harvest-test-linux, proxy-tests-linux]

    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_HUB_ID }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}
      - name: Pre release
        run: make ci/prerelease
  
  unit-test-windows:
    name: Windows unit tests
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Download deps
        run: go mod vendor

      - name: Running unit tests
        run: .\build\win_build.ps1 -skipBuild

  packaging-windows:
    name: Create MSI & Upload into GH Release assets
    runs-on: windows-2019
    needs: [unit-test-windows]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/newrelic/infrastructure-agent

    strategy:
      matrix:
        goarch: [amd64, 386]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/newrelic/infrastructure-agent
      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx
      - name: Import PFX certificate
        shell: pwsh
        run: build\import_cert.ps1 -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"
      - name: Build executables ${{ matrix.goarch }}
        shell: pwsh
        run: build\build_win.ps1 -skipTests -arch ${{ matrix.goarch }} -version "$env:TAG"
      - name: Create MSI ${{ matrix.goarch }}
        shell: pwsh
        run: build\release_win.ps1 -arch ${{ matrix.goarch }} -version "$env:TAG"
      - name: Upload MSI to GH
        shell: bash
        run: build/upload_artifacts_gh.sh
