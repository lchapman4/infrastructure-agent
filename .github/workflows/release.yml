name: Prerelease pipeline

on:
  release:
    types:
      - prereleased
    tags:
      - 'v*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO_VERSION: '1.9.7'
  GPG_MAIL: 'infrastructure-eng@newrelic.com'
  GPG_PASSPHRASE: ${{ secrets.OHAI_GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.OHAI_GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_BASE64: ${{ secrets.OHAI_PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_DESCRIPTION: 'New Relic'
  PFX_PASSPHRASE:  ${{ secrets.OHAI_PFX_PASSPHRASE }}
  REPO_FULL_NAME: ${{ github.event.repository.full_name }}
  SLACK_TOKEN: ${{ secrets.COREINT_SLACK_TOKEN }}
  SLACK_CHANNEL: ${{ secrets.COREINT_SLACK_CHANNEL }}
  SNYK_TOKEN: ${{ secrets.COREINT_SNYK_TOKEN }}
  TAG: ${{ github.event.release.tag_name }}
  DOCKER_HUB_ID: ${{ secrets.OHAI_DOCKER_HUB_ID }}
  DOCKER_HUB_PASSWORD: ${{ secrets.OHAI_DOCKER_HUB_PASSWORD }}

jobs:
#  prerelease:
#    name: Build and upload all artifacts into GH Release assets
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ env.DOCKER_HUB_ID }}
#          password: ${{ env.DOCKER_HUB_PASSWORD }}
#      - name: Pre release
#        run: make ci/prerelease
  package-win:
    name: Create MSI & Upload into GH Release assets
    runs-on: windows-2019
#    needs: [ prerelease ]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/newrelic/infrastructure-agent

    strategy:
      matrix:
        goarch: [amd64, 386]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/newrelic/infrastructure-agent
      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > wincert.pfx
#      - name: Download zip from GH Release assets and extract .exe
#        shell: pwsh
#        run: |
#          build\windows\download_zip_extract_exe.ps1 "$env:INTEGRATION" ${{ matrix.goarch }} "$env:TAG" "$env:REPO_FULL_NAME"
      - name: Import PFX certificate
        shell: pwsh
        run: build\import_cert.ps1 -pfx_passphrase "$env:PFX_PASSPHRASE" -pfx_certificate_description "$env:PFX_CERTIFICATE_DESCRIPTION"
      - name: Build executables ${{ matrix.goarch }}
        shell: pwsh
        run: build\build_win.ps1 -skipTests -arch ${{ matrix.goarch }} -version "$env:TAG"
      - name: Create MSI ${{ matrix.goarch }}
        shell: pwsh
        run: build\release_win.ps1 -arch ${{ matrix.goarch }} -version "$env:TAG"
      - name: Upload MSI to GH
        shell: bash
        run: build/upload_artifacts_gh.sh
